#pragma once
#define _CRT_SECURE_NO_WARNINGS // отключаем предупреждени€ о небезопасности
#include <iostream> 
#include <string> // дл€ работы со строками
#include <cstdlib> // дл€ функций rand() и srand()
#include <ctime> // дл€ работы функции time()
using namespace std;

// ЋјЅќ–ј“ќ–Ќјя –јЅќ“ј є 10≈.
/*

—оздать класс, описывающий двумерную матрицу. –еализовать функции:
Ц генераци€ массива (заполнение случайными числами);\/
Ц вывод массива на экран;\/
Ц†поиск координат элемента с минимальными значени€ми;\/
Ц получение элемента по позиции и запись по заданным координатам;
Ц получение подматрицы по начальным позици€м заданного размера.
Ќапример, дл€ матрицы размера 4х4
01 02 03 04
05 06 07 08
09 10 11 12
13 14 15 16
выделить подматрицу размером 3х2 с позиции 1х1
06 07
10 11
14 15

*/

class MATRIX
{

	// двумерный указатель на обший массив
	static MATRIX** mtrx;
    // число 
	int num;
	// размер массива по длине
	static int size_x;
	// размер массива по высоте
	static int size_y;	
	// метод создани€ массива
	static void creator();
	// очистка массива например, если будет задан бесконечный цикл
	static void cleaner();
	// печать массива
	static void printer( int size_y = 0, int size_x = 0, MATRIX** mtrx = NULL);
	// три вида поиска
	static  void search(const int &  Case = 2);
	// вывод элемента массива
	friend ostream& operator<< (ostream& out, MATRIX& a);
	// ввод в элемент массива
	friend istream& operator>> (istream& in, MATRIX& a);
	// a = size_x, b = size_y \
	определение размера массива
	static void set_size(const int & a = 1, const int & b = 1);
public:
	// конструктор по умолчанию
	MATRIX()
	{
		if(size_x >0 && size_y>0)
		num = rand() % 51;
	}
	// метод использующий все внутренние методы(типa main)\
	 с помощью него возможно использовать все методы при \
     этом не наруша€ принципы инкапсул€ции
	void Mat_user();
};

// _________________________
